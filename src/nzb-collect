#!/usr/bin/perl -w

use strict;
use warnings FATAL => 'all';

use Date::Calc qw( Add_Delta_Days Date_to_Time Today Week_of_Year );
use File::Basename;
use File::Path;
use File::stat;
use Getopt::Long;
use Mail::Sendmail;
use NZB::Binsearch;
use NZB::Check;
use NZB::EpisodeGuides;
use NZB::IMDB;
use NZB::MovieWeb;
use NZB::NFO;
use NZB::NZB;

my %CFG   = parseCMDL();

NZB::Binsearch->debug($CFG{'debug'});
NZB::Check->debug($CFG{'debug'});
NZB::IMDB->debug($CFG{'debug'});
NZB::Check->net_speed($CFG{'speed'});
if (defined $CFG{'wrapper'}) {
	NZB::Check->nzb($CFG{'wrapper'});
}

print STDERR "DEBUG is enabled\n" if $CFG{'debug'};

sub crawl_movies($$) { #{{{1 
	my ($CFG, $mails) = @_;

	local *OUT = $CFG->{'output'};

	my %blacklist      = map { $_ => 1 } @{$CFG->{'blacklist'}};
	my $genre_ratings  = $CFG->{'movie_genre_ratings'};
	my $group          = $CFG->{'movie_group'};
	my $max_size       = $CFG->{'movie_max_size'};
	my $min_size       = $CFG->{'movie_min_size'};
	my $minimum_rating = $CFG->{'movie_rating'};
	my $nzbage         = $CFG->{'nzbage'};
	my $release_weeks  = $CFG->{'movie_release_weeks'};
	my $search_weeks   = $CFG->{'movie_search_weeks'};

 	my $mail           = $mails->{'movies'};

	my $titles = NZB::MovieWeb->getMovieTitles($release_weeks, $search_weeks);
	for my $title (@$titles) {
		my $file_name = lc($title);
		$file_name =~ s/\s+/_/g;
		$file_name =~ s/\W//g;

		my $file   = $CFG->{'nzbdir'} . '/movie-' . $file_name . '.nzb';
		my $noFile = $CFG->{'nzbdir'} . '/.movie-' . $file_name . '.NO'; # created if rating is to bad => no more queries for this movie
		next if ((-e $file) || (-e $noFile));

		my $nzbs = NZB::Binsearch->searchNZBQuery($title, $group, $min_size, $max_size, $nzbage);
		print STDERR 'found potential ' . scalar(@$nzbs) . ' nzbs for "' . $title . '"' . "\n" if $CFG->{'debug'};

		for my $nzb (@$nzbs) {
			my $nfo = $nzb->{'nfo'};
			next if (! defined $nfo);

			my $imdb_id = NZB::NFO->parse_imdb_nr($nfo);
			next if (! defined $imdb_id);

			my $movie = NZB::IMDB->extract_imdb_data($imdb_id);
			next if (! defined $movie);

			# binsearch sometimes returns not the requested movie
			next if (! isExpectedMovie($movie->{'title'}, $title));

			# there must be at least 500 voters before we consider the rating at all
			next if ($movie->{'raters'} < 500);

			if (isMovieAcceptable($movie, $genre_ratings, $minimum_rating)) {
				if (NZB::Check->checkNZB($nzb, \%blacklist)) {
					print STDERR '"' . $title . '"' . "\n" if $CFG->{'debug'};
					mkpath(dirname($file));
					NZB::Binsearch->downloadNZB($nzb, $file);

	                                $mail .= ' - ' . $title . "\n";
        	                        $mail .= '   ' . 'Genres:';

                	                print OUT 'new NZB: ' . $file . "\n";
                        	        print OUT "\t" . 'genres:';
                                	for my $genre (@{$movie->{'genres'}}) {
                                        	print OUT ' ' . $genre;
	                                        $mail .= ' ' . $genre;
        	                        }
                	                print OUT "\n";
                        	        $mail .= "\n";


					my $rating = $movie->{'rating'};
					if (defined $rating) {
						print OUT "\t" . 'rating: ' . $rating . '/10.0' . "\n";
						$mail .= '   ' . 'Rating: ' . $rating . '/10.0' ."\n";
					}

					my $url = $movie->{'url'};
        	                        if (defined $url) {
                	                        print OUT "\t" . '   url: ' . $url . "\n";
                        	                $mail .= '   ' . '  More: ' . $url . "\n";
                                	}
	                                print OUT "\n";
        	                        $mail .= "\n";
				} else {
					next;
				}
			} else {
				print STDERR 'Rating (' . $movie->{'rating'} . ') of "' . $title . '" is to bad => skipping' . "\n" if $CFG->{'debug'};
				open(NO,'>' . $noFile) or die "Can't create new.txt: $!";
				close(NO);
			}
			
			last;
		}
	}

        $mails->{'movies'} = $mail;
} #}}}1
sub crawl_series($$) { #{{{1
	my ($CFG, $mails) = @_;

	local *OUT = $CFG->{'output'};

	my $nzbage         = $CFG->{'nzbage'};
	my $search_weeks   = $CFG->{'series_search_weeks'};
	my %blacklist      = map { $_ => 1 } @{$CFG->{'blacklist'}};

	for my $serie (@{$CFG->{'series'}}) {
		my $serieID = $serie->{'id'};

		my $episodes = NZB::EpisodeGuides->getEpisodes($serieID, $search_weeks);

		for my $episode (@$episodes) {
			foreach my $hd (0, 1) {
				print STDERR $serieID . ': ' . $episode . ($hd ? '-HD' : '') ."\n"  if $CFG->{'debug'};

				my $file = $CFG->{'nzbdir'} . '/' . $serieID . '_' . $episode;
				$file .= '-HD' if $hd;
				$file .= '.nzb';

				if (! -e $file) {
					my $nzbs = NZB::Binsearch->searchNZBSerie($serie, $hd, $episode, $nzbage);

					print STDERR 'found potential ' . scalar(@$nzbs) . ' nzbs' . "\n" if $CFG->{'debug'};

					if (download($nzbs, $file, \%blacklist)) {
						my $mail = $mails->{$serieID};
						$mail .= ' - ' . $episode . ($hd ? '-HD' : '') . "\n";
						$mails->{$serieID} = $mail;
						print OUT 'new NZB: ' . $file . "\n";
					} else {
						print STDERR 'no nzb found' ."\n" if $CFG->{'debug'};
					}
				}
			}
		}
	}
} #}}}1 

sub cleanup($) { #{{{1
	my ($CFG) = @_;

	my @today        = Today();
	my $search_weeks = ($CFG->{'series_search_weeks'}, $CFG->{'movie_search_weeks'})[$CFG->{'series_search_weeks'} < $CFG->{'movie_search_weeks'}];
	my $keep_date    = Date_to_Time(Add_Delta_Days(@today, $search_weeks * 2 * -7), 0, 0, 0);

	my $dir = ${CFG}->{'nzbdir'};
	opendir(DIR, $dir) or die $!;
	while (my $file = readdir(DIR)) {
		if (($file =~ m/.+\.nzb$/) || ($file =~ m/.+\.NO$/)) {
			my $sb = stat($dir . '/' . $file);
			if ($sb->mtime < $keep_date) {
				print STDERR 'cleaning old nzb: ' . $file . "\n" if $CFG->{'debug'};
				unlink($dir . '/' . $file);
			}
		}
	}
	closedir(DIR);
} #}}}1
sub download($$$) { #{{{1
	my ($nzbs, $file, $blacklist) = @_;
	
	for my $nzb (@$nzbs) {
		if (NZB::Check->checkNZB($nzb, %$blacklist)) {
			mkpath(dirname($file));
			NZB::Binsearch->downloadNZB($nzb, $file);
			return 1;
		}
	}

	return 0;
} #}}}1
sub initMail($) { #{{{1
	my ($CFG) = @_;

	my %mails = ();
	for my $serie (@{$CFG->{'series'}}) {
		$mails{$serie->{'id'}} = '';
	}

	$mails{'movies'} = '';

	return \%mails;
} #}}}1
sub isMovieAcceptable($$$) { #{{{1
	my ($movie, $genre_ratings, $minimum_rating) = @_;
	my $rating = $movie->{'rating'};
	for my $genre (@{$movie->{'genres'}}) {
		my $genre_rating = $genre_ratings->{lc($genre)};
		if (defined $genre_rating) {
			if ($rating >= $genre_rating) {
				return 1;
			}
		}
	}
	return ($rating >= $minimum_rating);
} #}}}1
sub isExpectedMovie($$) { #{{{1
	my ($title, $expected) = @_;

	$title = lc($title);
	$title =~ s/[^\w\d]//g;

	$expected = lc($expected);
	$expected =~ s/[^\w\d]//g;

	return ($title eq $expected);
} #}}}1
sub parseCMDL { # {{{1
	my $config = $ENV{HOME} . '/.nzb-collect';
	my $help=0;

	my $debug;
	my $nzbage;
	my $nzbdir;
	my $output;
	my $speed;
	my $wrapper;

	my $result = GetOptions(
		"config=s"  => \$config,
		"debug!"    => \$debug,
		"dir=s"     => \$nzbdir,
		"help!"     => \$help,
		"nzbage=i"  => \$nzbage,
		"output=s"  => \$output,
		"speed=i"   => \$speed,
		"wrapper=s" => \$wrapper,
	);

	if ($help) {
		print $0 . ': <OPTIONS>' . "\n";
		print "    --nzbage:  TODO\n";
		print "    --config:  filename of the configuration-file to read.\n";
		print "    --debug:   TODO\n";
		print "    --dir:     diretory to output the nzb files to.\n";
		print "    --help:    print this help.\n";
		print "    --output:  write progress and messages to this file (default: STDOUT).\n";
		print "    --speed:   limit download spead to this (kb/s).\n";
		print "    --wrapper: call thsi wrapper script for downloading.\n";
		exit 0;
	}

	my %CFG;
	# read in $config file
	open(FILE, $config) || die "could not open $config: $!";
	my $content; { local $/ = undef; $content = <FILE> }
	close(FILE);
	eval $content || die "could not slurp in $config: $!";

	# overriding config values by commandline values (won't be saved)
	if (defined $nzbage)  { $CFG{'nzbage'}   = $nzbage;  }
	if (defined $debug)   { $CFG{'debug'}    = $debug;   }
	if (defined $nzbdir)  { $CFG{'nzbdir'}   = $nzbdir;  }
	if (defined $speed)   { $CFG{'speed'}    = $speed;   }
	if (defined $wrapper) { $CFG{'wrapper'}  = $wrapper; }

	if (defined $output) {
		open(OUTPUT, ">", $output) || die "could not open $output: $!";
		$CFG{'output'} = *OUTPUT;
	} else {
		$CFG{'output'} = *STDOUT;
	}

	return %CFG;
} # }}}1
sub processNotifications($$) { #{{{1
	my ($CFG, $mails) = @_;

	my $from = $CFG->{'sender'};
	for my $serie (@{$CFG->{'series'}}) {
		my $serieID = $serie->{'id'};
		my $message = $mails->{$serieID};
		if ($message) {
			my $title = $serie->{'query'};
			$title =~ s/\+/ /g;

			my $prefix = "Hi\n\nHave you seen, that the new episodes of $title have aired in the US? Can't wait to view them on TV.\n\n";
			my $suffix = "\ncu\n\tAlex\n";
			sendMails($CFG, $serieID, '[Notify] ' . $title, $prefix . $message . $suffix);
		}
	}

	my $message = $mails->{'movies'};
	if ($message) {
		my $prefix = "Hi\n\nDo you know the following movie(s)? The rating on IMDB looks very promising:\n\n";
		my $suffix = "\nI'll keep you posted if I find other interesing movies.\n\ncu\n\tAlex\n";
		sendMails($CFG, 'movies', '[Notify] movies', $prefix . $message . $suffix);
	}
} #}}}1
sub sendMails($$$$) { #{{{1
	my ($CFG, $id, $subject, $message) = @_;

	local *OUT = $CFG->{'output'};

	my $notify = $CFG->{'notify'};
	for my $reciever (@{$notify->{$id}}) {
		my %mail = (From => $CFG{'sender'}, To => $reciever, Subject => $subject, Message => $message);
		sendmail(%mail) or die $Mail::Sendmail::error;
		print STDERR $Mail::Sendmail::log if $CFG{'debug'};
		print OUT 'mail for ' . $id . ' sent to ' . $reciever . "\n";
	}
}#}}}1

my $MAILS = initMail(\%CFG);

if ($CFG{'series_search_enabled'}) {
	print STDERR 'searching for series' . "\n" if $CFG{'debug'};
	crawl_series(\%CFG, $MAILS);
}

if ($CFG{'movie_search_enabled'}) {
	print STDERR 'searching for movies' . "\n" if $CFG{'debug'};
	crawl_movies(\%CFG, $MAILS);
}

cleanup(\%CFG);
processNotifications(\%CFG, $MAILS);

local *OUT = $CFG{'output'};
close(OUT);

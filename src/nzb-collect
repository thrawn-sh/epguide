#!/usr/bin/perl -w

use strict;
use warnings FATAL => 'all';

use Date::Format;
use Date::Parse;
use File::Basename;
use File::Path;
use Getopt::Long;
use LWP::ConnCache;
use NZB::Binsearch;
use NZB::Check;
use NZB::Common;
use WWW::Mechanize;

sub parseCMDL # {{{1
{
	my $config = $ENV{HOME} . '/.nzb-collect';
	my $help=0;

	my $age;
	my $debug;
	my $nzbdir;
	my $output;
	my $speed;
	my $wrapper;

	my $result = GetOptions(
		"age=i"     => \$age,
		"config=s"  => \$config,
		"debug!"    => \$debug,
		"dir=s"     => \$nzbdir,
		"help!"     => \$help,
		"output=s"  => \$output,
		"speed=i"   => \$speed,
		"wrapper=s" => \$wrapper,
	);

	if ($help) {
		print $0 . ': <OPTIONS>' . "\n";
		print "    --age:     TODO\n";
		print "    --config:  filename of the configuration-file to read.\n";
		print "    --debug:   TODO\n";
		print "    --dir:     diretory to output the nzb files to.\n";
		print "    --help:    print this help.\n";
		print "    --output:  write progress and messages to this file (default: STDOUT).\n";
		print "    --speed:   limit download spead to this (kb/s).\n";
		print "    --wrapper: call thsi wrapper script for downloading.\n";
		exit 0;
	}

	my %CFG;
	# read in $config file
	open(FILE, $config) || die "could not open $config: $!";
	my $content; { local $/ = undef; $content = <FILE> }
	close(FILE);
	eval $content || die "could not slurp in $config: $!";

	# overriding config values by commandline values (won't be saved)
	if (defined $age)      { $CFG{'age'}      = $age;      }
	if (defined $debug)    { $CFG{'debug'}    = $debug;    }
	if (defined $nzbdir)   { $CFG{'nzbdir'}   = $nzbdir;   }
	if (defined $speed)    { $CFG{'speed'}    = $speed;    }
	if (defined $wrapper)  { $CFG{'wrapper'}  = $wrapper;  }

	if (defined $output) {
		open(OUTPUT, ">", $output) || die "could not open $output: $!";
		$CFG{'output'} = *OUTPUT;
	} else {
		$CFG{'output'} = *STDOUT;
	}

	return %CFG;
} # }}}1

my %CFG = parseCMDL();

my $END     = str2time(time2str("%Y-%m-%d", time()));
my $START   = $END - ($CFG{'age'} * 86400);
my $WWW     = WWW::Mechanize->new();

$WWW->agent_alias('Windows IE 6');
$WWW->conn_cache(LWP::ConnCache->new)

NZB::Check->debug($CFG{'debug'});
NZB::Check->net_speed($CFG{'speed'});
if (defined $CFG{'wrapper'}) {
	NZB::Check->nzb($CFG{'wrapper'});
}

my %bp = map { $_ => 1 } @{$CFG{'blacklist'}};

if ($CFG{'debug'}) { print STDERR "DEBUG is enabled\n"; }

local *OUT = $CFG{'output'};
for my $serie (@{$CFG{'series'}}) {

	my $url = 'http://epguides.com/' . $serie->{'id'} . '/';
	$WWW->get($url);

	if (! $WWW->success) {
		print STDERR "Can't retrieve $url: $!";
		next;
	}

	for (split("\n", $WWW->content())) {
		if (/\s+(\d{1,2})-(\d{1,2})\s+(?:\S+\s+){0,1}(\d{2}.\w{3}.\d{2})/) {
			my $season   = $1;
			my $episode  = $2;
			my $released = $3;
			$released =~ s# #/#g;
			my @dateparts = split(/\//,$released);
			if ($dateparts[2] < 100) {
				$dateparts[2] += 2000;
			}
			$released = join('/', @dateparts);
			$released = str2time($released);

			if (($START <= $released) && ($released <= $END)) {
				my $episodeID = sprintf("S%02dE%02d", $season, $episode);
				my $nzbs_ref = NZB::Binsearch->searchNZB($serie, $episodeID, $CFG{'age'});

				my $file = $CFG{'nzbdir'} . '/' . $serie->{'id'} . '_' . $episodeID;
				if ($serie->{'hd'}) {
					$file .= '-HD';
				}
				$file .= '.nzb';

				if (! -e $file) {
					for my $nzb (@$nzbs_ref) {
						if ($CFG{'debug'}) { print STDERR $serie->{'id'} . ': ' . $episodeID . ($serie->{'hd'} ? '-HD' : '') ."\n"; }
						if (NZB::Check->checkNZB($nzb, %bp)) {
							mkpath(dirname($file));
							NZB::Binsearch->downloadNZB($nzb, $file);
							print OUT 'new NZB: ' . $file . "\n";
							last;
						}
					}
				}
			}
		}
	}
}
close(OUT);

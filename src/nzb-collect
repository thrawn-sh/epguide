#!/usr/bin/perl -w

use strict;
use warnings FATAL => 'all';

use Date::Calc qw( Add_Delta_Days Date_to_Time Today Week_of_Year );
use Date::Format;
use Date::Parse;
use File::Basename;
use File::Path;
use File::stat;
use Getopt::Long;
use JSON;
use LWP::ConnCache;
use LWP::Simple;
use NZB::Binsearch;
use NZB::Check;
use NZB::Common;
use URI::Escape;
use WWW::Mechanize;

my %CFG   = parseCMDL();
my $WWW   = WWW::Mechanize->new();

$WWW->agent_alias('Windows IE 6');
$WWW->conn_cache(LWP::ConnCache->new);

NZB::Binsearch->debug($CFG{'debug'});
NZB::Check->debug($CFG{'debug'});
NZB::Check->net_speed($CFG{'speed'});
if (defined $CFG{'wrapper'}) {
	NZB::Check->nzb($CFG{'wrapper'});
}


print STDERR "DEBUG is enabled\n" if $CFG{'debug'};

sub crawl_movies #{{{1 
{
	my ($CFG) = @_;

	local *OUT = $CFG->{'output'};

	my @today        = Today();
	my %blacklist    = map { $_ => 1 } @{$CFG->{'blacklist'}};

	my $genre_ratings_ref = $CFG->{'movie_genre_ratings'};
	my $group             = $CFG->{'movie_group'};
	my $max_size          = $CFG->{'movie_max_size'};
	my $min_size          = $CFG->{'movie_min_size'};
	my $minimum_rating    = $CFG->{'movie_rating'};
	my $nzbage            = $CFG->{'nzbage'};
	my $release_weeks     = $CFG->{'movie_release_weeks'};
	my $search_weeks      = $CFG->{'movie_search_weeks'};

	for (my $count = 0; $count <= $search_weeks; $count++) {
		my @date         = Add_Delta_Days(@today, ($release_weeks + $count) * -7);
		my ($week,$year) = Week_of_Year(@date);

		my $url = 'http://www.movieweb.com/movies/' . $year . '/week/' . $week;
		$WWW->get($url);

		if (! $WWW->success) {
			print STDERR "Can't retrieve $url: $!";
		}

		for (split("\n", $WWW->content())) {
			if (/\s+<h4><a[^>]+>([^<]+)<\/a><\/h4>/) {
				my $title = $1;
				my $file_name = lc($title);
				$file_name =~ s/\s+/_/g;
				$file_name =~ s/\W//g;

				my $file = $CFG->{'nzbdir'} . '/movie-' . $file_name . '.nzb';
				if (! -e $file) {
					my $url = 'http://www.imdbapi.com/?t=' . uri_escape($title) . '&y=' . $year;
					my $content = get($url);
					if (defined $content) {
						my $json = JSON->new->allow_nonref;
						my $imdb = $json->decode($content);

						my @genres = split(/,/, $imdb->{'Genre'});
						my $rating = $imdb->{'Rating'};

						if ((! defined $rating) || (lc($rating) ne "n/a")) {
							print STDERR 'No rating for "' . $title . '" => skipping' . "\n" if $CFG->{'debug'};
							next;
						}

						if (isMovieAcceptable($rating, \@genres, $genre_ratings_ref, $minimum_rating)) {
							print STDERR '"' . $title . '"' . "\n" if $CFG->{'debug'};
							my $nzbs_ref = NZB::Binsearch->searchNZBMovie($title, $group, $min_size, $max_size, $nzbage);

							print STDERR 'found potential ' . scalar(@$nzbs_ref) . ' nzbs' . "\n" if $CFG->{'debug'};

							if (download($nzbs_ref, $file, \%blacklist)) {
								print OUT 'new NZB: ' . $file . "\n";
								print OUT "\t" . 'genres:';
								for my $genre (@genres) {
									print OUT ' ' . $genre;
								}
								print OUT "\n";
								print OUT "\t" . 'rating: ' . $rating . "\n";
							} else {
								print STDERR 'no nzb found' ."\n" if $CFG->{'debug'};
							}
						} else {
							print STDERR 'Rating (' . $rating . ') of "' . $title . '" is to bad => skipping' . "\n" if $CFG->{'debug'};
						}
					} else {
						print STDERR 'could not retrieve rating from IMDB API' . "\n";
					}
				}
			}
		}
	}
} #}}}1
sub crawl_series #{{{1
{
	my ($CFG) = @_;

	local *OUT = $CFG->{'output'};

	my $nzbage         = $CFG->{'nzbage'};
	my $search_weeks   = $CFG->{'series_search_weeks'};
	my %blacklist      = map { $_ => 1 } @{$CFG->{'blacklist'}};


	my @today          = Today();
	my $nzb_end_date   = Date_to_Time(@today, 0, 0, 0);
	my $nzb_start_date = Date_to_Time(Add_Delta_Days(@today, $search_weeks * -7), 0, 0, 0);

	for my $serie (@{$CFG->{'series'}}) {
		my $url = 'http://epguides.com/' . $serie->{'id'} . '/';
		$WWW->get($url);

		if (! $WWW->success) {
			print STDERR "Can't retrieve $url: $!";
			next;
		}

		for (split("\n", $WWW->content())) {
			if (/\s+(\d{1,2})-(\d{1,2})\s+(?:\S+\s+){0,1}(\d{2}.\w{3}.\d{2})/) {
				my $season   = $1;
				my $episode  = $2;
				my $released = $3;
				$released =~ s# #/#g;
				my @dateparts = split(/\//,$released);
				if ($dateparts[2] < 100) {
					$dateparts[2] += 2000;
				}
				$released = join('/', @dateparts);
				$released = str2time($released);

				if (($nzb_start_date <= $released) && ($released <= $nzb_end_date)) {
					my $episodeID = sprintf("S%02dE%02d", $season, $episode);
					my $file = $CFG->{'nzbdir'} . '/' . $serie->{'id'} . '_' . $episodeID;
					if ($serie->{'hd'}) {
						$file .= '-HD';
					}
					$file .= '.nzb';

					if (! -e $file) {
						print STDERR $serie->{'id'} . ': ' . $episodeID . ($serie->{'hd'} ? '-HD' : '') ."\n"  if $CFG->{'debug'};
						my $nzbs_ref = NZB::Binsearch->searchNZBSerie($serie, $episodeID, $nzbage);

						print STDERR 'found potential ' . scalar(@$nzbs_ref) . ' nzbs' . "\n" if $CFG->{'debug'};

						if (download($nzbs_ref, $file, \%blacklist)) {
							print OUT 'new NZB: ' . $file . "\n";
						} else {
							print STDERR 'no nzb found' ."\n" if $CFG->{'debug'};
						}
					}
				}
			}
		}
	}
} #}}}1

sub cleanup #{{{1
{
	my ($CFG) = @_;

	my @today        = Today();
	my $search_weeks = ($CFG->{'series_search_weeks'}, $CFG->{'movie_search_weeks'})[$CFG->{'series_search_weeks'} < $CFG->{'movie_search_weeks'}];
	my $keep_date    = Date_to_Time(Add_Delta_Days(@today, $search_weeks * 2 * -7), 0, 0, 0);

	my $dir = ${CFG}->{'nzbdir'};
	opendir(DIR, $dir) or die $!;
	while (my $file = readdir(DIR)) {
		if ($file =~ m/.+\.nzb$/) {
			my $sb = stat($dir . '/' . $file);
			if ($sb->mtime < $keep_date) {
				print 'cleaning old nzb: ' . $file . "\n" if $CFG->{'debug'};
				unlink($dir . '/' . $file);
			}
		}
	}
	closedir(DIR);
} #}}}1
sub download #{{{1
{
	my ($nzbs_ref, $file, $blacklist) = @_;
	
	for my $nzb (@$nzbs_ref) {
		if (NZB::Check->checkNZB($nzb, %$blacklist)) {
			mkpath(dirname($file));
			NZB::Binsearch->downloadNZB($nzb, $file);
			return 1;
		}
	}

	return 0;
} #}}}1
sub isMovieAcceptable #{{{1
{
	my ($movie_rating, $genres_ref, $genre_ratings_ref, $minimum_rating) = @_;
	for my $genre (@$genres_ref) {
		my $genre_rating = $genre_ratings_ref->{lc($genre)};
		if (defined $genre_rating) {
			return ($movie_rating >= $genre_rating)
		}
	}
	return ($movie_rating >= $minimum_rating);
} #}}}1
sub parseCMDL # {{{1
{
	my $config = $ENV{HOME} . '/.nzb-collect';
	my $help=0;

	my $debug;
	my $nzbage;
	my $nzbdir;
	my $output;
	my $speed;
	my $wrapper;

	my $result = GetOptions(
		"config=s"  => \$config,
		"debug!"    => \$debug,
		"dir=s"     => \$nzbdir,
		"help!"     => \$help,
		"nzbage=i"  => \$nzbage,
		"output=s"  => \$output,
		"speed=i"   => \$speed,
		"wrapper=s" => \$wrapper,
	);

	if ($help) {
		print $0 . ': <OPTIONS>' . "\n";
		print "    --nzbage:  TODO\n";
		print "    --config:  filename of the configuration-file to read.\n";
		print "    --debug:   TODO\n";
		print "    --dir:     diretory to output the nzb files to.\n";
		print "    --help:    print this help.\n";
		print "    --output:  write progress and messages to this file (default: STDOUT).\n";
		print "    --speed:   limit download spead to this (kb/s).\n";
		print "    --wrapper: call thsi wrapper script for downloading.\n";
		exit 0;
	}

	my %CFG;
	# read in $config file
	open(FILE, $config) || die "could not open $config: $!";
	my $content; { local $/ = undef; $content = <FILE> }
	close(FILE);
	eval $content || die "could not slurp in $config: $!";

	# overriding config values by commandline values (won't be saved)
	if (defined $nzbage)  { $CFG{'nzbage'}   = $nzbage;  }
	if (defined $debug)   { $CFG{'debug'}    = $debug;   }
	if (defined $nzbdir)  { $CFG{'nzbdir'}   = $nzbdir;  }
	if (defined $speed)   { $CFG{'speed'}    = $speed;   }
	if (defined $wrapper) { $CFG{'wrapper'}  = $wrapper; }

	if (defined $output) {
		open(OUTPUT, ">", $output) || die "could not open $output: $!";
		$CFG{'output'} = *OUTPUT;
	} else {
		$CFG{'output'} = *STDOUT;
	}

	return %CFG;
} # }}}1

if ($CFG{'series_search_enabled'}) {
	print STDERR 'searching for series' . "\n" if $CFG{'debug'};
	crawl_series(\%CFG);
}

if ($CFG{'movie_search_enabled'}) {
	print STDERR 'searching for movies' . "\n" if $CFG{'debug'};
	crawl_movies(\%CFG);
}

cleanup(\%CFG);

local *OUT = $CFG{'output'};
close(OUT);
